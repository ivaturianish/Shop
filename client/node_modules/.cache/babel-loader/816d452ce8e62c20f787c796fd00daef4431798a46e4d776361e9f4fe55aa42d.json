{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"C:\\\\AAAnewShop\\\\client\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Check if user is logged in on initial render\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      try {\n        // In a real application, this would verify the token with your backend\n        // Example: const response = await fetch('/api/auth/verify');\n\n        // For demonstration, we'll check localStorage\n        const token = localStorage.getItem(\"token\");\n        const userData = localStorage.getItem(\"user\");\n        if (token && userData) {\n          setUser(JSON.parse(userData));\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error(\"Authentication error:\", error);\n        localStorage.removeItem(\"token\");\n        localStorage.removeItem(\"user\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkLoggedIn();\n  }, []);\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      // In a real application, this would be an API call to your backend\n      // Example: const response = await fetch('/api/auth/login', {...});\n\n      // For demonstration, we'll simulate a successful login\n      const userData = {\n        id: \"123\",\n        name: \"John Doe\",\n        email: email\n      };\n\n      // Store token and user data\n      localStorage.setItem(\"token\", \"sample-token\");\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n      setUser(userData);\n      setIsAuthenticated(true);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      return {\n        success: false,\n        error: \"Invalid credentials\"\n      };\n    }\n  };\n\n  // Register user\n  const register = async (name, email, password) => {\n    try {\n      // In a real application, this would be an API call to your backend\n      // Example: const response = await fetch('/api/auth/register', {...});\n\n      // For demonstration, we'll simulate a successful registration\n      const userData = {\n        id: \"123\",\n        name: name,\n        email: email\n      };\n\n      // Store token and user data\n      localStorage.setItem(\"token\", \"sample-token\");\n      localStorage.setItem(\"user\", JSON.stringify(userData));\n      setUser(userData);\n      setIsAuthenticated(true);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      return {\n        success: false,\n        error: \"Registration failed\"\n      };\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      loading,\n      login,\n      register,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"MIOyihIJe1jbesOAPrjh1+/HIzc=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","checkLoggedIn","token","localStorage","getItem","userData","JSON","parse","error","console","removeItem","login","email","password","id","name","setItem","stringify","success","register","logout","Provider","value","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/AAAnewShop/client/src/context/AuthContext.jsx"],"sourcesContent":["\"use client\"\r\n\r\nimport { createContext, useState, useEffect } from \"react\"\r\n\r\nexport const AuthContext = createContext()\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null)\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  // Check if user is logged in on initial render\r\n  useEffect(() => {\r\n    const checkLoggedIn = async () => {\r\n      try {\r\n        // In a real application, this would verify the token with your backend\r\n        // Example: const response = await fetch('/api/auth/verify');\r\n\r\n        // For demonstration, we'll check localStorage\r\n        const token = localStorage.getItem(\"token\")\r\n        const userData = localStorage.getItem(\"user\")\r\n\r\n        if (token && userData) {\r\n          setUser(JSON.parse(userData))\r\n          setIsAuthenticated(true)\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Authentication error:\", error)\r\n        localStorage.removeItem(\"token\")\r\n        localStorage.removeItem(\"user\")\r\n      } finally {\r\n        setLoading(false)\r\n      }\r\n    }\r\n\r\n    checkLoggedIn()\r\n  }, [])\r\n\r\n  // Login user\r\n  const login = async (email, password) => {\r\n    try {\r\n      // In a real application, this would be an API call to your backend\r\n      // Example: const response = await fetch('/api/auth/login', {...});\r\n\r\n      // For demonstration, we'll simulate a successful login\r\n      const userData = {\r\n        id: \"123\",\r\n        name: \"John Doe\",\r\n        email: email,\r\n      }\r\n\r\n      // Store token and user data\r\n      localStorage.setItem(\"token\", \"sample-token\")\r\n      localStorage.setItem(\"user\", JSON.stringify(userData))\r\n\r\n      setUser(userData)\r\n      setIsAuthenticated(true)\r\n\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error(\"Login error:\", error)\r\n      return { success: false, error: \"Invalid credentials\" }\r\n    }\r\n  }\r\n\r\n  // Register user\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      // In a real application, this would be an API call to your backend\r\n      // Example: const response = await fetch('/api/auth/register', {...});\r\n\r\n      // For demonstration, we'll simulate a successful registration\r\n      const userData = {\r\n        id: \"123\",\r\n        name: name,\r\n        email: email,\r\n      }\r\n\r\n      // Store token and user data\r\n      localStorage.setItem(\"token\", \"sample-token\")\r\n      localStorage.setItem(\"user\", JSON.stringify(userData))\r\n\r\n      setUser(userData)\r\n      setIsAuthenticated(true)\r\n\r\n      return { success: true }\r\n    } catch (error) {\r\n      console.error(\"Registration error:\", error)\r\n      return { success: false, error: \"Registration failed\" }\r\n    }\r\n  }\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\")\r\n    localStorage.removeItem(\"user\")\r\n    setUser(null)\r\n    setIsAuthenticated(false)\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        loading,\r\n        login,\r\n        register,\r\n        logout,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}